author: Uwe Stuehler
core-version: >=5.1.14
created: 20180805134004186
creator: Charles Delbé
dependents: 
description: Material Design components (needs MDC-Web assets)
list: readme usage changelog license
modified: 20180805134004186
modifier: Charles Delbé
plugin-type: plugin
revision: 0
title: $:/plugins/ustuehler/mdc
type: application/json
version: 0.2.0

{
    "tiddlers": {
        "$:/plugins/ustuehler/mdc/FloatingActionButton": {
            "title": "$:/plugins/ustuehler/mdc/FloatingActionButton",
            "caption": "Floating Action Button",
            "created": "20171025190817336",
            "mdc-class": "mdc-fab",
            "mdc-fab-icon": "favorite",
            "modified": "20171027222525750",
            "type": "text/vnd.tiddlywiki",
            "text": "\\define this-transclusion()\n{$(currentTiddler)$|$(currentTiddler)$|||}\n\\end\n\\define this-tiddler()\n[<transclusion>prefix<this-transclusion>]]\n\\end\n\\define fab(position)\n<span class=\"mdc-fab material-icons tc-fab--$position$\" aria-label=\"New\">\n\n<$link to={{!!link-to}} class=\"mdc-fab__icon\">\n\n<$transclude field=\"mdc-fab-icon\" mode=\"inline\">\n\n<$transclude tiddler=\"$:/plugins/ustuehler/mdc/FloatingActionButton\" field=\"mdc-fab-icon\" mode=\"inline\"/>\n\n</$transclude>\n\n</$link>\n\n</span>\n\\end\n\n<$list\n  variable=\"\"\n  filter=\"[[$:/plugins/ustuehler/mdc/FloatingActionButton]is[current]]\"\n  emptyMessage=\"\"\"<<fab \"absolute\">>\"\"\">\n<<fab \"relative\">>\n</$list>"
        },
        "$:/plugins/ustuehler/mdc/ListItem/Divider": {
            "title": "$:/plugins/ustuehler/mdc/ListItem/Divider",
            "created": "20171025225148364",
            "modified": "20171025225148364",
            "type": "text/vnd.tiddlywiki",
            "text": "<hr class=\"mdc-list-divider\">"
        },
        "$:/plugins/ustuehler/mdc/ListItem/StartDetail/Icon": {
            "title": "$:/plugins/ustuehler/mdc/ListItem/StartDetail/Icon",
            "created": "20171025235011039",
            "list-item-icon": "favorite",
            "modified": "20171025235354496",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "<i class=\"material-icons mdc-list-item__start-detail\" aria-hidden=\"true\">\n\n<$transclude field=\"list-item-icon\" mode=\"inline\"/>\n\n</i>"
        },
        "$:/plugins/ustuehler/mdc/ListItem/StartDetail": {
            "title": "$:/plugins/ustuehler/mdc/ListItem/StartDetail",
            "created": "20171026011028222",
            "modified": "20171026011152447",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "<$transclude field=\"list-item-start-detail\">\n<$transclude tiddler=\"$:/plugins/ustuehler/mdc/ListItem/StartDetail/Icon\"/>\n</$transclude>"
        },
        "$:/plugins/ustuehler/mdc/ListItem": {
            "title": "$:/plugins/ustuehler/mdc/ListItem",
            "caption": "List Item",
            "created": "20171025232245094",
            "link-to": "",
            "list-item-icon": "list",
            "mdc-class": "mdc-list-item",
            "modified": "20171026011210915",
            "tags": "",
            "type": "text/vnd.tiddlywiki",
            "text": "<$set name=\"link-to\" value={{!!link-to}} emptyValue=<<currentTiddler>>>\n\n<$link to=<<link-to>> class={{$:/plugins/ustuehler/mdc/ListItem!!mdc-class}}>\n\n{{||$:/plugins/ustuehler/mdc/ListItem/StartDetail}}\n\n<$transclude field=\"caption\" mode=\"inline\">\n\n<$view field=\"title\"/>\n\n</$transclude>\n\n</$link>\n\n</$set>"
        },
        "$:/plugins/ustuehler/mdc/changelog": {
            "title": "$:/plugins/ustuehler/mdc/changelog",
            "caption": "MDC Plugin",
            "created": "20171026021820182",
            "modified": "20171103053815569",
            "type": "text/vnd.tiddlywiki",
            "text": "<$list filter=\"[prefix[mdc/v]!sort[released]limit[1]]\">\n  <$macrocall $name=\"tabs\" tabsList=\"[prefix[mdc/v]!sort[released]]\" default={{!!title}} class=\"tc-vertical\" template=\"ReleaseTemplate\" />\n</$list>"
        },
        "$:/core/images/storyview-replace": {
            "title": "$:/core/images/storyview-replace",
            "tags": "$:/tags/Image",
            "text": "<svg class=\"tc-image-storyview-replace tc-image-button\" width=\"22pt\" height=\"22pt\" viewBox=\"0 0 128 128\">\n    <g fill-rule=\"evenodd\">\n        <path d=\"M8.00697327,0 C3.58484404,0 0,3.59075293 0,8.00697327 L0,119.993027 C0,124.415156 3.59075293,128 8.00697327,128 L119.993027,128 C124.415156,128 128,124.409247 128,119.993027 L128,8.00697327 C128,3.58484404 124.409247,0 119.993027,0 L8.00697327,0 L8.00697327,0 Z M23.9992458,16 C19.5813843,16 16,19.578055 16,24.0085154 L16,71.9914846 C16,76.4144655 19.5881049,80 23.9992458,80 L104.000754,80 C108.418616,80 112,76.421945 112,71.9914846 L112,24.0085154 C112,19.5855345 108.411895,16 104.000754,16 L23.9992458,16 L23.9992458,16 Z\"></path>\n    </g>\n</svg>\n"
        },
        "$:/plugins/ustuehler/mdc/macros/drawer": {
            "title": "$:/plugins/ustuehler/mdc/macros/drawer",
            "caption": "drawer",
            "created": "20171025225118792",
            "modified": "20171101205007857",
            "tags": "$:/tags/Macro",
            "type": "text/vnd.tiddlywiki",
            "text": "\\define drawer(filter:\"[all[shadows+tiddlers]tag[$:/tags/DrawerTemplate]]\" class:\"mdc-temporary-drawer\" headerText:\"\")\n<aside class=\"$class$\">\n  <nav class='$class$__drawer'>\n    <header class=\"$class$__header\">\n      <div class=\"$class$__header-content mdc-theme--primary-bg mdc-theme--text-primary-on-primary\">\n        {{$:/GitHubForkRibbon}}\n        [img width=\"100%\" height=\"100%\"\n [https://material.io/components/images/welcome/root.svg]]\n        $headerText$\n      </div>\n    </header>\n    <nav class=\"$class$__content mdc-list-group\">\n      <$list filter=\"$filter$\">\n        <$transclude/>\n      </$list>\n    </nav>\n  </nav>\n</aside>\n\\end"
        },
        "$:/plugins/ustuehler/mdc/readme": {
            "title": "$:/plugins/ustuehler/mdc/readme",
            "created": "20171027020335751",
            "modified": "20171027020459944",
            "type": "text/vnd.tiddlywiki",
            "text": "This plugin provides macros and widgets to make the [[Material Components Catalog|http://material-components-web.appspot.com/]] accessible in WikiText.\n\nIt relies on assets provided by either of the plugins [[mdc-web|$:/plugins/ustuehler/mdc-web]] or [[mdc-web-cdn|$:/plugins/ustuehler/mdc-web-cdn]]."
        },
        "$:/plugins/ustuehler/mdc/storyviews/replace.js": {
            "title": "$:/plugins/ustuehler/mdc/storyviews/replace.js",
            "text": "/*\\\ntitle: $:/plugins/ustuehler/mdc/storyviews/replace.js\ntype: application/javascript\nmodule-type: storyview\n\nSingle-tiddler story view without transition (modified from zoomin.js as a quick hack, because zoomin had some CSS issues)\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar easing = \"cubic-bezier(0.645, 0.045, 0.355, 1)\"; // From http://easings.net/#easeInOutCubic\n\nvar ReplaceListView = function(listWidget) {\n\tvar self = this;\n\tthis.listWidget = listWidget;\n\t// Get the index of the tiddler that is at the top of the history\n\tvar history = this.listWidget.wiki.getTiddlerDataCached(this.listWidget.historyTitle,[]),\n\t\ttargetTiddler;\n\tif(history.length > 0) {\n\t\ttargetTiddler = history[history.length-1].title;\n\t}\n\t// Make all the tiddlers position absolute, and hide all but the top (or first) one\n\t$tw.utils.each(this.listWidget.children,function(itemWidget,index) {\n\t\tvar domNode = itemWidget.findFirstDomNode();\n\t\t// Abandon if the list entry isn't a DOM element (it might be a text node)\n\t\tif(!(domNode instanceof Element)) {\n\t\t\treturn;\n\t\t}\n\t\tif((targetTiddler && targetTiddler !== itemWidget.parseTreeNode.itemTitle) || (!targetTiddler && index)) {\n\t\t\tdomNode.style.display = \"none\";\n\t\t} else {\n\t\t\tself.currentTiddlerDomNode = domNode;\n\t\t}\n\t\t$tw.utils.addClass(domNode,\"tc-storyview-replace-tiddler\");\n\t});\n};\n\nReplaceListView.prototype.navigateTo = function(historyInfo) {\n\tvar duration = $tw.utils.getAnimationDuration(),\n\t\tlistElementIndex = this.listWidget.findListItem(0,historyInfo.title);\n\tif(listElementIndex === undefined) {\n\t\treturn;\n\t}\n\tvar listItemWidget = this.listWidget.children[listElementIndex],\n\t\ttargetElement = listItemWidget.findFirstDomNode();\n\t// Abandon if the list entry isn't a DOM element (it might be a text node)\n\tif(!(targetElement instanceof Element)) {\n\t\treturn;\n\t}\n\t// Make the new tiddler be position absolute and visible so that we can measure it\n\t$tw.utils.addClass(targetElement,\"tc-storyview-replace-tiddler\");\n\t$tw.utils.setStyle(targetElement,[\n\t\t{display: \"block\"},\n\t\t{transformOrigin: \"0 0\"},\n\t\t{transform: \"translateX(0px) translateY(0px) scale(1)\"},\n\t\t{transition: \"none\"},\n\t\t{opacity: \"0.0\"}\n\t]);\n\t// Get the position of the source node, or use the centre of the window as the source position\n\tvar sourceBounds = historyInfo.fromPageRect || {\n\t\t\tleft: window.innerWidth/2 - 2,\n\t\t\ttop: window.innerHeight/2 - 2,\n\t\t\twidth: window.innerWidth/8,\n\t\t\theight: window.innerHeight/8\n\t\t};\n\t// Try to find the title node in the target tiddler\n\tvar titleDomNode = findTitleDomNode(listItemWidget) || listItemWidget.findFirstDomNode(),\n\t\tzoomBounds = titleDomNode.getBoundingClientRect();\n\t// Compute the transform for the target tiddler to make the title lie over the source rectange\n\tvar targetBounds = targetElement.getBoundingClientRect(),\n\t\tscale = sourceBounds.width / zoomBounds.width,\n\t\tx = sourceBounds.left - targetBounds.left - (zoomBounds.left - targetBounds.left) * scale,\n\t\ty = sourceBounds.top - targetBounds.top - (zoomBounds.top - targetBounds.top) * scale;\n\t// Transform the target tiddler to its starting position\n\t$tw.utils.setStyle(targetElement,[\n\t\t{transform: \"translateX(\" + x + \"px) translateY(\" + y + \"px) scale(\" + scale + \")\"}\n\t]);\n\t// Force layout\n\t$tw.utils.forceLayout(targetElement);\n\t// Apply the ending transitions with a timeout to ensure that the previously applied transformations are applied first\n\tvar self = this,\n\t\tprevCurrentTiddler = this.currentTiddlerDomNode;\n\tthis.currentTiddlerDomNode = targetElement;\n\t// Transform the target tiddler to its natural size\n\t$tw.utils.setStyle(targetElement,[\n\t\t{transition: $tw.utils.roundTripPropertyName(\"transform\") + \" \" + duration + \"ms \" + easing + \", opacity \" + duration + \"ms \" + easing},\n\t\t{opacity: \"1.0\"},\n\t\t{transform: \"translateX(0px) translateY(0px) scale(1)\"},\n\t\t{zIndex: \"0\"},\n\t]);\n\t// Transform the previous tiddler out of the way and then hide it\n\tif(prevCurrentTiddler && prevCurrentTiddler !== targetElement) {\n\t\tscale = zoomBounds.width / sourceBounds.width;\n\t\tx =  zoomBounds.left - targetBounds.left - (sourceBounds.left - targetBounds.left) * scale;\n\t\ty =  zoomBounds.top - targetBounds.top - (sourceBounds.top - targetBounds.top) * scale;\n\t\t$tw.utils.setStyle(prevCurrentTiddler,[\n\t\t\t{transition: $tw.utils.roundTripPropertyName(\"transform\") + \" \" + duration + \"ms \" + easing + \", opacity \" + duration + \"ms \" + easing},\n\t\t\t{opacity: \"0.0\"},\n\t\t\t{transformOrigin: \"0 0\"},\n\t\t\t{transform: \"translateX(\" + x + \"px) translateY(\" + y + \"px) scale(\" + scale + \")\"},\n\t\t\t{zIndex: \"0\"}\n\t\t]);\n\t\t// Hide the tiddler when the transition has finished\n\t\tsetTimeout(function() {\n\t\t\tif(self.currentTiddlerDomNode !== prevCurrentTiddler) {\n\t\t\t\tprevCurrentTiddler.style.display = \"none\";\n\t\t\t}\n\t\t},duration);\n\t}\n\t// Scroll the target into view\n//\t$tw.pageScroller.scrollIntoView(targetElement);\n};\n\n/*\nFind the first child DOM node of a widget that has the class \"tc-title\"\n*/\nfunction findTitleDomNode(widget,targetClass) {\n\ttargetClass = targetClass || \"tc-title\";\n\tvar domNode = widget.findFirstDomNode();\n\tif(domNode && domNode.querySelector) {\n\t\treturn domNode.querySelector(\".\" + targetClass);\n\t}\n\treturn null;\n}\n\nReplaceListView.prototype.insert = function(widget) {\n\tvar targetElement = widget.findFirstDomNode();\n\t// Abandon if the list entry isn't a DOM element (it might be a text node)\n\tif(!(targetElement instanceof Element)) {\n\t\treturn;\n\t}\n\t// Make the newly inserted node position absolute and hidden\n\t$tw.utils.addClass(targetElement,\"tc-storyview-replace-tiddler\");\n\t$tw.utils.setStyle(targetElement,[\n\t\t{display: \"none\"}\n\t]);\n};\n\nReplaceListView.prototype.remove = function(widget) {\n\tvar targetElement = widget.findFirstDomNode(),\n\t\tduration = $tw.utils.getAnimationDuration(),\n\t\tremoveElement = function() {\n\t\t\twidget.removeChildDomNodes();\n\t\t};\n\t// Abandon if the list entry isn't a DOM element (it might be a text node)\n\tif(!(targetElement instanceof Element)) {\n\t\tremoveElement();\n\t\treturn;\n\t}\n\t// Abandon if hidden\n\tif(targetElement.style.display != \"block\" ) {\n\t\tremoveElement();\n\t\treturn;\n\t}\n\t// Set up the tiddler that is being closed\n\t$tw.utils.addClass(targetElement,\"tc-storyview-replace-tiddler\");\n\t$tw.utils.setStyle(targetElement,[\n\t\t{display: \"block\"},\n\t\t{transformOrigin: \"50% 50%\"},\n\t\t{transform: \"translateX(0px) translateY(0px) scale(1)\"},\n\t\t{transition: \"none\"},\n\t\t{zIndex: \"0\"}\n\t]);\n\t// We'll move back to the previous or next element in the story\n\tvar toWidget = widget.previousSibling();\n\tif(!toWidget) {\n\t\ttoWidget = widget.nextSibling();\n\t}\n\tvar toWidgetDomNode = toWidget && toWidget.findFirstDomNode();\n\t// Set up the tiddler we're moving back in\n\tif(toWidgetDomNode) {\n\t\t$tw.utils.addClass(toWidgetDomNode,\"tc-storyview-replace-tiddler\");\n\t\t$tw.utils.setStyle(toWidgetDomNode,[\n\t\t\t{display: \"block\"},\n\t\t\t{transformOrigin: \"50% 50%\"},\n\t\t\t{transform: \"translateX(0px) translateY(0px) scale(10)\"},\n\t\t\t{transition: $tw.utils.roundTripPropertyName(\"transform\") + \" \" + duration + \"ms \" + easing + \", opacity \" + duration + \"ms \" + easing},\n\t\t\t{opacity: \"0\"},\n\t\t\t{zIndex: \"0\"}\n\t\t]);\n\t\tthis.currentTiddlerDomNode = toWidgetDomNode;\n\t}\n\t// Animate them both\n\t// Force layout\n\t$tw.utils.forceLayout(this.listWidget.parentDomNode);\n\t// First, the tiddler we're closing\n\t$tw.utils.setStyle(targetElement,[\n\t\t{transformOrigin: \"50% 50%\"},\n\t\t{transform: \"translateX(0px) translateY(0px) scale(0.1)\"},\n\t\t{transition: $tw.utils.roundTripPropertyName(\"transform\") + \" \" + duration + \"ms \" + easing + \", opacity \" + duration + \"ms \" + easing},\n\t\t{opacity: \"0\"},\n\t\t{zIndex: \"0\"}\n\t]);\n\tsetTimeout(removeElement,duration);\n\t// Now the tiddler we're going back to\n\tif(toWidgetDomNode) {\n\t\t$tw.utils.setStyle(toWidgetDomNode,[\n\t\t\t{transform: \"translateX(0px) translateY(0px) scale(1)\"},\n\t\t\t{opacity: \"1\"}\n\t\t]);\n\t}\n\treturn true; // Indicate that we'll delete the DOM node\n};\n\nexports.replace = ReplaceListView;\n\n})();\n",
            "type": "application/javascript",
            "module-type": "storyview"
        },
        "$:/plugins/ustuehler/mdc/utils.js": {
            "title": "$:/plugins/ustuehler/mdc/utils.js",
            "text": "/*\\\ntitle: $:/plugins/ustuehler/mdc/utils.js\ntype: application/javascript\nmodule-type: utils\n\nUtility methods like showSnackbar()\n\n\\*/\n(function() {\n'use strict';\n\nexports.showSnackbar = function(message, timeout) {\n  $tw.rootWidget.findFirstDomNode().querySelector('.mdc-snackbar').widget.show({\n    message: message,\n    timeout: timeout || 2750\n  });\n};\n\n}());\n",
            "type": "application/javascript",
            "module-type": "utils"
        },
        "$:/plugins/ustuehler/mdc/widgets/action-showsnackbar.js": {
            "title": "$:/plugins/ustuehler/mdc/widgets/action-showsnackbar.js",
            "text": "/*\\\ntitle: $:/plugins/ustuehler/mdc/widgets/action-showsnackbar.js\ntype: application/javascript\nmodule-type: widget\ncaption: action-showsnackbar\n\nAction widget that shows the first snackbar found in the document with a message and optional action button\n\n\\*/\n(function () {\n\n\"use strict\";\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ActionShowSnackbarWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nActionShowSnackbarWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nActionShowSnackbarWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nActionShowSnackbarWidget.prototype.execute = function() {\n\tthis.message = this.getAttribute(\"message\", \"\");\n\tthis.actionText = this.getAttribute(\"actionText\", \"\");\n\tthis.timeout = parseInt(this.getAttribute(\"timeout\", \"2750\"));\n\n  // Compute the internal state of child widgets.\n  this.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nActionShowSnackbarWidget.prototype.refresh = function(changedTiddlers) {\n  var changedAttributes = this.computeAttributes();\n\n  if (changedAttributes.message || changedAttributes.actionText || changedAttributes.timeout) {\n    this.refreshSelf();\n    return true;\n  }\n\n  return this.refreshChildren(changedTiddlers);\n};\n\n/*\n * Invoke the action associated with this widget\n */\nActionShowSnackbarWidget.prototype.invokeAction = function(triggeringWidget,event) {\n  var self = this;\n  var snackbar = this.document.getElementsByClassName(\"mdc-snackbar\")[0];\n\n  if (snackbar !== undefined) {\n    var data = {\n      message: this.message,\n      actionText: this.actionText,\n      actionHandler: function() {\n        console.log(\"Invoking child action widgets\");\n        self.invokeActions(triggeringWidget,event);\n      },\n      timeout: this.timeout\n    };\n\n    snackbar.widget.show(data);\n  }\n\n  return true; // Action was invoked\n}\n\n/*\n * Don't allow actions to propagate, because we invoke actions ourself\n */\nActionShowSnackbarWidget.prototype.allowActionPropagation = function() {\n  return false;\n};\n\nexports[\"action-showsnackbar\"] = ActionShowSnackbarWidget;\n\n})();\n",
            "type": "application/javascript",
            "module-type": "widget",
            "caption": "action-showsnackbar"
        },
        "$:/plugins/ustuehler/mdc/widgets/action-toggledrawer.js": {
            "title": "$:/plugins/ustuehler/mdc/widgets/action-toggledrawer.js",
            "text": "/*\\\ntitle: $:/plugins/ustuehler/mdc/widgets/action-toggledrawer.js\ntype: application/javascript\nmodule-type: widget\ncaption: action-toggledrawer\n\nAction widget that toggles the visibility of the first drawer found in the document\n\n\\*/\n(function (global) {\n\n\"use strict\";\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\nvar drawerTypes = {\n  permanent: {\n    class: \"MDCPermanentDrawer\",\n    selector: \".mdc-permanent-drawer\"\n  },\n  persistent: {\n    class: \"MDCPersistentDrawer\",\n    selector: \".mdc-persistent-drawer\"\n  },\n  temporary: {\n    class: \"MDCTemporaryDrawer\",\n    selector: \".mdc-temporary-drawer\"\n  }\n};\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ActionToggleDrawerWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nActionToggleDrawerWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nActionToggleDrawerWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nActionToggleDrawerWidget.prototype.execute = function() {\n  this.type = this.getAttribute(\"type\", \"temporary\")\n  if (!drawerTypes[this.type]) {\n    throw Error(\"invalid drawer type: \" + this.type);\n  }\n  this[\"class\"] = drawerTypes[this.type][\"class\"];\n  this.selector = drawerTypes[this.type].selector;\n  // Compute the internal state of child widgets.\n  this.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nActionToggleDrawerWidget.prototype.refresh = function(changedTiddlers) {\n  var changedAttributes = this.computeAttributes();\n\n  if (changedAttributes[\"class\"] || changedAttributes.selector) {\n    this.refreshSelf();\n    return true;\n  }\n\n  return this.refreshChildren(changedTiddlers);\n};\n\n/*\n * Invoke the action associated with this widget\n */\nActionToggleDrawerWidget.prototype.invokeAction = function(triggeringWidget,event) {\n  var self = this;\n  var el = this.document.querySelector(this.selector);\n\n  if (el) {\n    var constructor = global.mdc.drawer[this[\"class\"]];\n    var drawer = new constructor(el);\n\n    drawer.open = !drawer.open;\n  }\n\n  return true; // Action was invoked\n}\n\n/*\n * Don't allow actions to propagate, because we invoke actions ourself\n */\nActionToggleDrawerWidget.prototype.allowActionPropagation = function() {\n  return false;\n};\n\nexports[\"action-toggledrawer\"] = ActionToggleDrawerWidget;\n\n})(this);\n",
            "type": "application/javascript",
            "module-type": "widget",
            "caption": "action-toggledrawer"
        },
        "$:/plugins/ustuehler/mdc/widgets/mdc-auto-init.js": {
            "title": "$:/plugins/ustuehler/mdc/widgets/mdc-auto-init.js",
            "text": "/*\\\ntitle: $:/plugins/ustuehler/mdc/widgets/mdc-auto-init.js\ntype: application/javascript\nmodule-type: widget\ncaption: mdc-auto-init\n\nmdc-auto-init widget to initialize MDC-Web components from HTML elements\n\n\\*/\n(function (global) {\n\n\"use strict\";\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MDCAutoInitWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMDCAutoInitWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMDCAutoInitWidget.prototype.render = function(parent,nextSibling) {\n\t//var self = this;\n\n\t// Compute attributes and execute state\n\tthis.computeAttributes();\n\tthis.execute();\n\n  // Insert DOM node\n  var domNode = this.document.createElement(\"div\");\n  domNode.setAttribute(\"class\",\"mdc-auto-init\");\n\tparent.insertBefore(domNode,nextSibling);\n\tthis.renderChildren(domNode,null);\n  this.domNodes.push(domNode);\n\n  // For each child widget run mdc.autoInit()\n  if (this.window) {\n    this.window.mdc.autoInit(domNode);\n  } else {\n    console.log(\"warning: this.window should be set in MDCAutoInitWidget.render()?\");\n  }\n};\n\n/*\nCompute the internal state of the widget\n*/\nMDCAutoInitWidget.prototype.execute = function() {\n  this.makeChildWidgets();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nMDCAutoInitWidget.prototype.refresh = function(changedTiddlers) {\n  if (this.refreshChildren(changedTiddlers)) {\n    this.refreshSelf();\n    return true;\n  }\n\n  return false;\n};\n\nexports[\"mdc-auto-init\"] = MDCAutoInitWidget;\n\n})(this);\n",
            "type": "application/javascript",
            "module-type": "widget",
            "caption": "mdc-auto-init"
        },
        "$:/plugins/ustuehler/mdc/widgets/snackbar.js": {
            "title": "$:/plugins/ustuehler/mdc/widgets/snackbar.js",
            "text": "/*\\\ntitle: $:/plugins/ustuehler/mdc/widgets/snackbar.js\ntype: application/javascript\nmodule-type: widget\ncaption: snackbar\n\nSnackbar widget using MDC-Web components\n\n\\*/\n(function (global) {\n\n\"use strict\";\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar SnackbarWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nSnackbarWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nSnackbarWidget.prototype.render = function(parent,nextSibling) {\n\t//var self = this;\n\n\t// Compute attributes and execute state\n\tthis.computeAttributes();\n\tthis.execute();\n\n  // Create text element\n\tvar textNode = this.document.createElement(\"div\");\n\ttextNode.setAttribute(\"class\",\"mdc-snackbar__text\");\n\ttextNode.textContent = this.message;\n\n  // Create action button element\n\tvar actionButtonNode = this.document.createElement(\"button\");\n\tactionButtonNode.setAttribute(\"class\",\"mdc-snackbar__action-button\");\n\tactionButtonNode.textContent = this.actionButtonLabel;\n\n  // Create action wrapper element\n\tvar actionWrapperNode = this.document.createElement(\"div\");\n\tactionWrapperNode.setAttribute(\"class\",\"mdc-snackbar__action-wrapper\");\n  actionWrapperNode.appendChild(actionButtonNode);\n\n\t// Create snackbar element\n\tvar domNode = this.document.createElement(\"div\");\n\tdomNode.setAttribute(\"class\",\"mdc-snackbar\");\n\tdomNode.setAttribute(\"aria-live\",\"assertive\");\n\tdomNode.setAttribute(\"aria-atomic\",\"true\");\n\tdomNode.setAttribute(\"aria-hidden\",\"true\");\n\tdomNode.appendChild(textNode);\n\tdomNode.appendChild(actionWrapperNode);\n\n  // Create the snackbar behaviour\n  var MDCSnackbar = global.mdc.snackbar.MDCSnackbar;\n  var snackbar = new MDCSnackbar(domNode);\n  snackbar.dismissesOnAction = true;\n  this.snackbar = snackbar;\n\n\t// Insert element\n\tparent.insertBefore(domNode,nextSibling);\n\tthis.renderChildren(domNode,null);\n\tthis.domNodes.push(domNode);\n\n  // Allow access to this widget via the DOM node (for $action-showsnackbar)\n  domNode.widget = this;\n};\n\n/*\nCompute the internal state of the widget\n*/\nSnackbarWidget.prototype.execute = function() {\n};\n\n/*\nShow the snackbar\n*/\nSnackbarWidget.prototype.show = function(data) {\n  if (this.snackbar) {\n    var data2 = {\n      message: data.message || \"\",\n      timeout: data.timeout || 2750\n    };\n\n    if (data.actionText) {\n      data2.actionText = data.actionText;\n      data2.actionHandler = data.actionHandler || function() {\n        console.log(data2.actionText);\n      }\n    }\n\n    this.snackbar.show(data2);\n  }\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nSnackbarWidget.prototype.refresh = function(changedTiddlers) {\n  var changedAttributes = this.computeAttributes();\n\n  if (changedAttributes.message || changedAttributes.actionButtonLabel) {\n    this.refreshSelf();\n    return true;\n  }\n\n  return this.refreshChildren(changedTiddlers);\n};\n\nexports[\"snackbar\"] = SnackbarWidget;\n\n})(this);\n",
            "type": "application/javascript",
            "module-type": "widget",
            "caption": "snackbar"
        }
    }
}