created: 20181108075032533
creator: Charles Delbé
modified: 20181108075032533
modifier: Charles Delbé
title: c:\Users\Charles\dev\projects\tiddlywiki\wiki\wiki\tiddlers\libs\ckeditor\plugins\templates\templates\images\template3.gif
tmap.id: c0225251-c880-4dd6-96ee-8114c34a7ead
type: image/gif

