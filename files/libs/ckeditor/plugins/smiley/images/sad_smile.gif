created: 20181108075031945
creator: Charles Delbé
modified: 20181108075031945
modifier: Charles Delbé
title: c:\Users\Charles\dev\projects\tiddlywiki\wiki\wiki\tiddlers\libs\ckeditor\plugins\smiley\images\sad_smile.gif
tmap.id: 47f2a794-f642-41d1-ac85-8a3162515460
type: image/gif

