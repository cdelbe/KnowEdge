created: 20181108075031850
creator: Charles Delbé
modified: 20181108075031850
modifier: Charles Delbé
title: c:\Users\Charles\dev\projects\tiddlywiki\wiki\wiki\tiddlers\libs\ckeditor\plugins\smiley\images\devil_smile.gif
tmap.id: 9bf5df7c-bf17-42ee-8867-923d7d03fe2d
type: image/gif

